[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "robot-environment"
version = "0.1.0"
description = "A comprehensive Python framework for robotic pick-and-place operations with vision-based object detection"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Daniel Gaida", email = "daniel.gaida@th-koeln.de"}
]
maintainers = [
    {name = "Daniel Gaida", email = "daniel.gaida@th-koeln.de"}
]
keywords = [
    "robotics",
    "computer-vision",
    "pick-and-place",
    "object-detection",
    "niryo",
    "widowx",
    "manipulation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "numpy>=1.20.0",
    "opencv-python>=4.5.0",
    "redis>=4.0.0",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "sounddevice>=0.4.0",
]

[project.optional-dependencies]
# Core vision and communication
vision = [
    "vision_detect_segment>=0.1.0",
    "redis_robot_comm>=0.1.0",
]

# Text-to-speech capabilities
tts = [
    "elevenlabs>=0.2.0",
    "kokoro>=0.1.0",
]

# Niryo robot support
niryo = [
    "pyniryo>=1.1.0",
]

# WidowX robot support
widowx = [
    "interbotix-xs-modules>=0.1.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

# Complete installation with all features
all = [
    "robot-environment[vision,tts,niryo,widowx,dev]",
]

[project.urls]
Homepage = "https://github.com/dgaida/robot_environment"
Repository = "https://github.com/dgaida/robot_environment"
"Bug Tracker" = "https://github.com/dgaida/robot_environment/issues"

[project.scripts]
robot-env = "robot_environment.cli:main"

[tool.setuptools]
packages = ["robot_environment"]

[tool.setuptools.package-data]
robot_environment = ["py.typed"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "redis.*",
    "pyniryo.*",
    "elevenlabs.*",
    "kokoro.*",
    "sounddevice.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=robot_environment",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["robot_environment"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
]

[tool.pylint.format]
max-line-length = 120
